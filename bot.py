import os
import psutil
import logging
import subprocess
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID", "0"))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def check_auth(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if user_id != ALLOWED_USER_ID:
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return False
    return True

def get_additional_info() -> str:
    """–ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é shell-—Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        result = subprocess.run(["sh", "server_info.sh"], capture_output=True, text=True)
        return result.stdout.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

def get_server_status() -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ."""
    cpu_usage = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    # –§–∏–∫—Å –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ total = 0 (Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
    total_memory = memory.total if memory.total > 0 else os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES')
    used_memory = memory.used if memory.total > 0 else total_memory - memory.available
    
    additional_info = get_additional_info()
    
    status = (f"üíª *–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:*\n"
              f"üñ• *CPU:* {cpu_usage}%\n"
              f"üóÑ *RAM:* {memory.percent}% (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {used_memory // (1024**3)} –ì–ë –∏–∑ {total_memory // (1024**3)} –ì–ë)\n"
              f"üíæ *–î–∏—Å–∫:* {disk.percent}% (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {disk.used // (1024**3)} –ì–ë –∏–∑ {disk.total // (1024**3)} –ì–ë)\n"
              f"üîç *–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n{additional_info}")
    return status

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not check_auth(update):
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

async def status(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not check_auth(update):
        return
    status_text = get_server_status()
    await update.message.reply_text(status_text, parse_mode='Markdown')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
app = Application.builder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("status", status))

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
